{
  "name": "MEETINGS WORKFLOW TO CALENDER FROM TELEGRAM",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [-300, 180],
      "id": "8adb79da-018b-4a96-9ac3-3f1ad6144db0",
      "name": "Telegram Trigger",
      "webhookId": "YOUR_WEBHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "YOUR_GMAIL@gmail.com",
          "mode": "list",
          "cachedResultName": "YOUR_GMAIL@gmail.com"
        },
        "timeMin": "={{ $json.timeMin }}",
        "timeMax": "={{ $json.timeMax }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [780, 100],
      "id": "3c0922e5-f61c-45af-990a-9757e8b8efa2",
      "name": "Get many events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "YOUR_GOOGLE_CALENDAR_CREDENTIAL_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1f3a81b2-dbb5-439d-8928-a166bfd25b73",
                    "leftValue": "=  {{ $json.message.text.toLowerCase() }}",
                    "rightValue": "check",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4649ba7b-8a1f-4c79-bdc8-cc7ac150b03a",
                    "leftValue": "=  {{ $json.message.text.toLowerCase() }}",
                    "rightValue": "free",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "99e36684-4301-4968-8dc5-51d0208429e1",
                    "leftValue": "=  {{ $json.message.text.toLowerCase() }}",
                    "rightValue": "set",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7aca2356-4eb3-44a0-826f-85a4d8faeb91",
                    "leftValue": "=  {{ $json.message.text.toLowerCase() }}",
                    "rightValue": "arrange",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [-40, 160],
      "id": "76c2855a-bf40-47a4-937a-e72f5b2346ba",
      "name": "Switch"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "YOUR_GMAIL@gmail.com",
          "mode": "list",
          "cachedResultName": "YOUR_GMAIL@gmail.com"
        },
        "start": "= {{ $json.start.dateTime }}",
        "end": "= {{ $json.end.dateTime }}",
        "additionalFields": {
          "description": "=<a href=\"{{ $json.description }}\">Join Meeting</a>",
          "location": "Asia/Kolkata",
          "summary": "= {{ $json.summary }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [1040, 380],
      "id": "7dcf59e1-ba3b-43c5-a4f5-a0e1c8ffb899",
      "name": "Create an event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "YOUR_GOOGLE_CALENDAR_CREDENTIAL_ID",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const content = $json.body?.choices?.[0]?.message?.content;\n\nif (!content) {\n  throw new Error(\"No content found in the response\");\n}\n\nconst lines = content.split('\\n').map(line => line.trim());\n\nconst getValue = (label) => {\n  const line = lines.find(l => l.toUpperCase().startsWith(label.toUpperCase() + ':'));\n  return line ? line.split(':').slice(1).join(':').trim() : null;\n};\n\nconst meeting = getValue('MEETING');\nconst date = getValue('DATE');\nconst timeRaw = getValue('TIME');\nconst link = getValue('LINK') || 'No link provided';\n\nif (!meeting || !date || !timeRaw) {\n  throw new Error('Missing meeting, date, or time in input');\n}\n\nfunction normalizeTime(t) {\n  t = t.trim().toUpperCase();\n  if (!t.includes(':')) {\n    t = t.replace(/(AM|PM)/, ':00$1');\n  }\n  return t;\n}\n\nconst [startRaw, endRaw] = timeRaw.split('-').map(t => normalizeTime(t.trim()));\n\nreturn [\n  {\n    json: {\n      meeting,\n      date,\n      \"start time\": startRaw,\n      \"end time\": endRaw,\n      link\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 400],
      "id": "abdd7b4d-75e8-4c9b-abd8-ef93e4a7c0c1",
      "name": "CLEAN MEETING DETAILS"
    },
    {
      "parameters": {
        "jsCode": "function convertTo24Hour(timeStr) {\n  const clean = timeStr.trim().toUpperCase().replace(/\\s+/g, '');\n  const match = clean.match(/^(\\d{1,2})(?::(\\d{2}))?(AM|PM)$/);\n\n  if (!match) throw new Error('Invalid time format');\n\n  let hour = parseInt(match[1], 10);\n  let minute = parseInt(match[2] || '00', 10);\n  const period = match[3];\n\n  if (period === 'PM' && hour !== 12) hour += 12;\n  if (period === 'AM' && hour === 12) hour = 0;\n\n  return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n}\n\nconst dateParts = $json.date.split('-');\nconst formattedDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;\n\nconst start = convertTo24Hour($json['start time']);\nconst end = convertTo24Hour($json['end time']);\n\nconst startISO = `${formattedDate}T${start}:00+05:30`;\nconst endISO = `${formattedDate}T${end}:00+05:30`;\n\nreturn {\n  json: {\n    summary: $json.meeting || \"Untitled\",\n    description: $json.link || \"No link provided\",\n    start: {\n      dateTime: startISO,\n      timeZone: \"Asia/Kolkata\"\n    },\n    end: {\n      dateTime: endISO,\n      timeZone: \"Asia/Kolkata\"\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [780, 380],
      "id": "67c1ed18-1514-48df-bdaf-d7ceddf3cdad",
      "name": " SET TIMINGS AS CALENER UNDERSTAND"
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "= {{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1760, 200],
      "id": "49585614-1a4d-41dc-af2d-e18a6f486b61",
      "name": "Send a text message",
      "webhookId": "YOUR_WEBHOOK_ID",
      "credentials": {
        "telegramApi": {
          "id": "YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": " Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENROUTER_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n  \"model\": \"mistralai/mistral-7b-instruct\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a meeting data extractor.\\n\\nYou understand natural human language, casual phrases, and time expressions. Your job is to extract clean and structured meeting details from informal text.\\n\\n🕒 Timezone: IST (UTC+5:30)\\nToday's date is: {{ $now.setZone('Asia/Kolkata').toFormat('dd-MM-yyyy') }}\\nTomorrow's date is: {{ $now.setZone('Asia/Kolkata').plus({ days: 1 }).toFormat('dd-MM-yyyy') }}\\n\\n🎯 Extract exactly:\\n- MEETING: The subject of the meeting (exclude time, date, or link)\\n- DATE: In DD-MM-YYYY format (interpret words like 'tomorrow', 'next week', '7th of next month')\\n- TIME: Start and end time in **strict 12-hour format**, like `10am - 11am`, or `11:30pm - 12:15am` (no parentheses, no extra text)\\n- LINK: The full meeting link. If not available, write exactly: `No link provided`\\n\\n🧠 Time Rules:\\n1. If start & end time exist → use them.\\n2. If start time + duration (e.g. 45 minutes) → calculate end time.\\n3. If only start time → leave TIME blank.\\n4. If no time → leave TIME blank.\\n5. If no link → write: `No link provided` (no assumptions, no notes)\\n\\n❌ DO NOT add notes, assumptions, or extra text in parentheses.\\n\\n📌 Format the output **strictly like this**:\\n\\nMEETING: <subject>\\nDATE: <dd-mm-yyyy>\\nTIME: <start - end> (or leave blank)\\nLINK: <full link or 'No link provided'>\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.message.text }}\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [320, 380],
      "id": "9c2dad9c-4c55-4c1f-af70-8c0fce771365",
      "name": " TAKES MEETING DETAILS1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": " Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENROUTER_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n  \"model\": \"mistralai/mistral-7b-instruct\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a calendar date extractor.\\n\\nUse IST timezone (UTC+5:30). Today is {{ $now.setZone('Asia/Kolkata').toFormat('dd-MM-yyyy') }}.\\nTomorrow is {{ $now.setZone('Asia/Kolkata').plus({ days: 1 }).toFormat('dd-MM-yyyy') }}.\\nDay after tomorrow is {{ $now.setZone('Asia/Kolkata').plus({ days: 2 }).toFormat('dd-MM-yyyy') }}.\\n\\nFrom the user's message, extract:\\n- DATE: Exact date in DD-MM-YYYY format.\\n\\nRespond ONLY like this:\\nDATE: <exact date>\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.message.text }}\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [340, 80],
      "id": "75150b02-4017-452f-a490-15a1cb05cd27",
      "name": " TAKES SEARCHING DETAILS"
    },
    {
      "parameters": {
        "jsCode": "const content = $json.body?.choices?.[0]?.message?.content;\n\nif (!content) throw new Error(\"No content from LLM response\");\n\nconst match = content.match(/DATE:\\s*(\\d{2}-\\d{2}-\\d{4})/);\n\nif (!match) throw new Error(\"No valid date found\");\n\nconst [day, month, year] = match[1].split('-');\n\nconst start = new Date(`${year}-${month}-${day}T00:00:00+05:30`);\nconst end = new Date(`${year}-${month}-${day}T23:59:59+05:30`);\n\nreturn [{\n  json: {\n    timeMin: start.toISOString(),\n    timeMax: end.toISOString(),\n    readableDate: match[1]\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [560, 100],
      "id": "31ff17c8-f0d0-41cc-baa5-5cfce7bafe90",
      "name": " CONVERTS THAT CALENDER UNDERSTAND"
    },
    {
      "parameters": {
        "jsCode": "const events = $json.items || [$json];\nlet date = \"\";\n\nlet message = \"\";\n\nfor (const event of events) {\n  const summary = (event.summary || \"Untitled Event\").trim();\n  const link = event.htmlLink || \"No link provided\";\n\n  if (event.start.date) {\n    date = event.start.date.split(\"-\").reverse().join(\"-\");\n    message += `Event: ${summary}\\nDate: ${date}\\nAll Day Event\\nLink: ${link}\\n\\n`;\n  } else {\n    const startDate = new Date(event.start.dateTime);\n    const endDate = new Date(event.end.dateTime);\n\n    date = startDate.toLocaleDateString(\"en-GB\");\n\n    const startTime = startDate.toLocaleTimeString(\"en-IN\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n      timeZone: \"Asia/Kolkata\"\n    });\n\n    const endTime = endDate.toLocaleTimeString(\"en-IN\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n      timeZone: \"Asia/Kolkata\"\n    });\n\n    message += `Event: ${summary}\\nDate: ${date}\\nStart Time: ${startTime}\\nEnd Time: ${endTime}\\nLink: ${link}\\n\\n`;\n  }\n}\n\nreturn [{ json: { text: message.trim() } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 120],
      "id": "5e18459c-6016-44d2-b259-7ed918e7fc16",
      "name": "EDIT EVENTS"
    },
    {
      "parameters": {
        "jsCode": "const message = $json.MESSAGE;\n\nconst match = message.match(/MEETING SET:\\s*(.+?)\\nFROM\\s*:(.+?)\\nTO\\s*:(.+)/);\n\nif (!match) {\n  return [{ json: { error: \"Invalid format\" } }];\n}\n\nconst meeting = match[1].trim();\nconst fromDateTime = new Date(match[2].trim());\nconst toDateTime = new Date(match[3].trim());\n\nconst formatDate = (dateObj) => {\n  const date = dateObj.toLocaleDateString(\"en-GB\");\n  const time = dateObj.toLocaleTimeString(\"en-IN\", {\n    hour: \"numeric\",\n    hour12: true,\n    timeZone: \"Asia/Kolkata\"\n  }).replace(/ /g, \"\");\n  return `${date}, ${time}`;\n};\n\nconst fromFormatted = formatDate(fromDateTime);\nconst toFormatted = formatDate(toDateTime);\n\nconst output = `MEETING SETED: ${meeting}\\nFROM: ${fromFormatted}\\nTO: ${toFormatted}`;\n\nreturn [{ json: { text: output } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 380],
      "id": "4d605653-bef2-4c2b-9d4e-bdbb9a77639a",
      "name": "EDIT MESSAGE"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f09d8e9e-f423-4781-aede-ca6b81b1d3fc",
              "name": "MESSAGE",
              "value": "=✅ MEETING SET: {{$json.summary}}\nFROM :{{$json.start.dateTime}}\nTO: {{$json.end.dateTime}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1240, 380],
      "id": "2029c237-2db1-4128-b676-77dfbbc6bc23",
      "name": " TAKES CONFIRMATION MESSAGE"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [[{ "node": "Switch", "type": "main", "index": 0 }]]
    },
    "Get many events": {
      "main": [[{ "node": "EDIT EVENTS", "type": "main", "index": 0 }]]
    },
    "Switch": {
      "main": [
        [{ "node": " TAKES SEARCHING DETAILS", "type": "main", "index": 0 }],
        [{ "node": " TAKES SEARCHING DETAILS", "type": "main", "index": 0 }],
        [{ "node": " TAKES MEETING DETAILS1", "type": "main", "index": 0 }],
        [{ "node": " TAKES MEETING DETAILS1", "type": "main", "index": 0 }]
      ]
    },
    "CLEAN MEETING DETAILS": {
      "main": [[{ "node": " SET TIMINGS AS CALENER UNDERSTAND", "type": "main", "index": 0 }]]
    },
    " SET TIMINGS AS CALENER UNDERSTAND": {
      "main": [[{ "node": "Create an event", "type": "main", "index": 0 }]]
    },
    "Create an event": {
      "main": [[{ "node": " TAKES CONFIRMATION MESSAGE", "type": "main", "index": 0 }]]
    },
    " TAKES MEETING DETAILS1": {
      "main": [[{ "node": "CLEAN MEETING DETAILS", "type": "main", "index": 0 }]]
    },
    " TAKES SEARCHING DETAILS": {
      "main": [[{ "node": " CONVERTS THAT CALENDER UNDERSTAND", "type": "main", "index": 0 }]]
    },
    " CONVERTS THAT CALENDER UNDERSTAND": {
      "main": [[{ "node": "Get many events", "type": "main", "index": 0 }]]
    },
    "EDIT EVENTS": {
      "main": [[{ "node": "Send a text message", "type": "main", "index": 0 }]]
    },
    "EDIT MESSAGE": {
      "main": [[{ "node": "Send a text message", "type": "main", "index": 0 }]]
    },
    " TAKES CONFIRMATION MESSAGE": {
      "main": [[{ "node": "EDIT MESSAGE", "type": "main", "index": 0 }]]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  }
}
